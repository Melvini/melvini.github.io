<?xml version="1.0" encoding="utf-8"?>






<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>melvini</title>
        <link>https://melvini.com/</link>
        <description>这是一个记录技术与生活的博客</description>
        <generator>Hugo 0.65.3 https://gohugo.io/</generator>
        
            <language>zh-CN</language>
        
        
            <managingEditor>allen897577@gmail.com (melvini)</managingEditor>
        
        
            <webMaster>allen897577@gmail.com (melvini)</webMaster>
        
        
            <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
        
        <lastBuildDate>Sun, 23 May 2021 18:24:51 +0800</lastBuildDate>
        
            <atom:link rel="self" type="application/rss+xml" href="https://melvini.com/rss.xml" />
        
        
            <item>
                <title>年末闲逛</title>
                <link>https://melvini.com/life/%E5%B9%B4%E6%9C%AB%E9%97%B2%E9%80%9B/</link>
                <guid isPermaLink="true">https://melvini.com/life/%E5%B9%B4%E6%9C%AB%E9%97%B2%E9%80%9B/</guid>
                <pubDate>Wed, 17 Feb 2021 15:46:16 +0800</pubDate>
                
                
                
                    <description><![CDATA[<p><img src="/media/p2.jpg" alt="江滩"></p>
<p>年后难得的好天气，去江滩闲逛。</p>
<p>人不多</p>
<p>​</p>
]]></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://melvini.com/categories/life/">life</category>
                                
                            
                        
                    
                        
                    
                
            </item>
        
            <item>
                <title>VSCode Go配置</title>
                <link>https://melvini.com/tech/vscode-go%E9%85%8D%E7%BD%AE/</link>
                <guid isPermaLink="true">https://melvini.com/tech/vscode-go%E9%85%8D%E7%BD%AE/</guid>
                <pubDate>Mon, 15 Feb 2021 00:32:33 +0800</pubDate>
                
                
                
                    <description><![CDATA[<ol>
<li>
<p>先从扩展管理中安装Go插件</p>
</li>
<li>
<p>设置go proxy</p>
</li>
</ol>
<pre><code>go clean --modcache
go env -w GOPROXY=https://goproxy.cn
</code></pre><ol start="3">
<li>
<p>安装Go插件所依赖的<code>go tools</code>（按<code>Ctrl+Shift+P</code> 调出命令面板，输入<code>go install tools</code> 选Go: <code>Install/Update Tools</code>）</p>
</li>
<li>
<p>使用go mod 把 Use Language Server设置选中状态即开启了gopls了，这时vscode就会很好的支持go mod类型的项目了。</p>
</li>
</ol>
]]></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://melvini.com/categories/tech/">tech</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://melvini.com/tags/go/">GO</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>虾仁炒饭</title>
                <link>https://melvini.com/life/%E8%99%BE%E4%BB%81%E7%82%92%E9%A5%AD/</link>
                <guid isPermaLink="true">https://melvini.com/life/%E8%99%BE%E4%BB%81%E7%82%92%E9%A5%AD/</guid>
                <pubDate>Fri, 18 Oct 2019 22:46:16 +0800</pubDate>
                
                
                
                    <description><![CDATA[<ol>
<li>将2个海鸭蛋（用的我家海鸭蛋）的蛋黄蛋白分离，分别捣碎。</li>
<li>沸水锅加少许盐，放入一小把青豆焯水捞出后备用。</li>
<li>将120g新鲜基围虾洗净留尾去壳，划开虾背去虾线，虾头留用。入沸水锅煮至7成熟捞出，放凉后去虾尾壳。*保留虾尾煮熟的目的是为了去壳方便，防止尾部碎掉。</li>
<li>2个鸡蛋充分打散，取2份嗨拌米饭微波炉加热2分钟后倒入碗中，待完全变凉后将蛋液倒入搅拌均匀备用。*米饭一定要和蛋液充分拌匀，让每一粒米都裹上蛋液。</li>
<li>热锅冷油，下虾头炼油，当油呈金黄色时，将虾头捞出弃置。</li>
<li>虾油锅中加捣碎的咸蛋黄碎，小火翻炒后加入一把肉松快速拌匀，再放入虾仁翻炒均匀。</li>
<li>转大火加入拌了蛋液的米饭，快速翻炒至米粒均匀上色，放入咸蛋白（适量放，也可不放）和青豆继续翻炒，加少许盐调味后出锅（盐可根据个人口味调节）。倒入米饭后一定要用大火翻炒，可快速炒干水分且粒粒分明。</li>
<li>撒点香葱碎和海苔丝。</li>
</ol>
<p>改进：</p>
<ol>
<li>去虾线很麻烦，所以我直接买了虾仁。</li>
<li>肉松、蛋液我都没放。放了胡萝卜丁和青豆，然后和虾仁一起焯水过熟</li>
<li>没有虾头炼油，翻炒的时候我加了老抽。</li>
</ol>
<p>成品：
<img src="/media/p1.jpg" alt="虾仁炒饭"></p>
<p>​</p>
]]></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://melvini.com/categories/life/">life</category>
                                
                            
                        
                    
                        
                    
                
            </item>
        
            <item>
                <title>PHP-PCNTL</title>
                <link>https://melvini.com/tech/php-pcntl/</link>
                <guid isPermaLink="true">https://melvini.com/tech/php-pcntl/</guid>
                <pubDate>Sun, 15 Sep 2019 00:23:08 +0800</pubDate>
                
                
                
                    <description><![CDATA[<h3 id="pcntl_fork">pcntl_fork</h3>
<p>通过 pcntl_fock 函数创建子进程：</p>
<pre><code>echo 'Started!';

$pid = pcntl_fock();

if ($pid == -1) {
  echo 'Fork Children Failed';
}elseif ($pid == 0) {
  echo 'In The Children Process';
}elseif ($pid &gt; 0) {
  echo 'In The Mail Process';
}

echo 'Ended';
</code></pre><p>进程从 pcntl_fock 开始，会产生分叉，主进程和子进程都会执行 pcntl_fock 所有的代码，可以通过 $pid 判断代码是执行在哪个进程：</p>
<p>pid = 0 : 当前在子进程
pid &gt; 0：当前在主进程，pid为创建出来的子进程的进程号</p>
]]></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://melvini.com/categories/tech/">tech</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://melvini.com/tags/php/">PHP</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>PHP执行Shell</title>
                <link>https://melvini.com/tech/php%E6%89%A7%E8%A1%8Cshell/</link>
                <guid isPermaLink="true">https://melvini.com/tech/php%E6%89%A7%E8%A1%8Cshell/</guid>
                <pubDate>Tue, 25 Jun 2019 00:32:33 +0800</pubDate>
                
                
                
                    <description><![CDATA[<p><strong>shell_exec( string $cmd ) : string</strong></p>
<p>— 通过 shell 环境执行命令，并且将完整的输出以字符串的方式返回。</p>
<p>$name = 'msg-send';
shell_exec(&quot;sudo -Hu root systemctl restart &quot; . $name);</p>
]]></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://melvini.com/categories/tech/">tech</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://melvini.com/tags/php/">PHP</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>早餐</title>
                <link>https://melvini.com/life/%E6%97%A9%E9%A4%90/</link>
                <guid isPermaLink="true">https://melvini.com/life/%E6%97%A9%E9%A4%90/</guid>
                <pubDate>Mon, 18 Mar 2019 22:46:16 +0800</pubDate>
                
                
                
                    <description><![CDATA[<p><strong>灌汤包</strong></p>
<p>用料</p>
<ol>
<li>猪皮冻（淘宝、京东）</li>
<li>猪肉馅</li>
<li>加入葱姜去腥，然后根据个人口味加入调味料：盐、生抽、料酒、鸡精、白胡椒粉...</li>
<li>加入猪皮冻，1:1的比例较好，</li>
<li>饺子皮</li>
</ol>
<p>步骤</p>
<ol>
<li>包包子（参考）</li>
<li>包子尽量放在可以一个一个装的盒子里，套上保鲜膜。这样做是为了防止汤包裂开</li>
<li>蒸包子：5-10min，速冻过的汤包，蒸的时间会长些</li>
</ol>
<p><strong>葱花鸡蛋饼</strong></p>
<p>用料</p>
<ol>
<li>鸡蛋：4个</li>
<li>面粉：140g（适量即可，注意鸡蛋与面粉的比例即可，本人会多放鸡蛋，味道更好些）</li>
<li>葱花、盐、水（适量即可）</li>
</ol>
<p>步骤</p>
<ol>
<li>鸡蛋打匀</li>
<li>碗中：加入面粉、打匀的鸡蛋液</li>
<li>添加水、盐，至浓稠度适中，加入葱花，搅拌均匀</li>
<li>锅内放少许油，将鸡蛋面糊沿着锅，绕一圈倒入</li>
<li>用锅铲，将面糊往锅中心铺匀</li>
<li>小火慢煎，反复翻面</li>
</ol>
<p>​</p>
]]></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://melvini.com/categories/life/">life</category>
                                
                            
                        
                    
                        
                    
                
            </item>
        
            <item>
                <title>Charles</title>
                <link>https://melvini.com/tech/charles/</link>
                <guid isPermaLink="true">https://melvini.com/tech/charles/</guid>
                <pubDate>Tue, 05 Mar 2019 00:32:33 +0800</pubDate>
                
                
                
                    <description><![CDATA[<h2 id="功能介绍">功能介绍</h2>
<h3 id="设置系统代理">设置系统代理</h3>
<p>选择菜单中的 “Proxy” –&gt; “Mac OS X Proxy” 来将Charles设置成系统代理</p>
<h3 id="查看视图">查看视图</h3>
<ul>
<li>Structure 视图将网络请求按访问的域名分类。</li>
<li>Sequence 视图将网络请求按访问的时间排序。</li>
</ul>
<h3 id="过滤网络请求">过滤网络请求</h3>
<ol>
<li>在主界面的中部的 Filter 栏中填入需要过滤出来的关键字。例如我们的服务器的地址是：https://survey.zhongchebaolian.com/ , 那么只需要在 Filter 栏中填入 survey 即可。</li>
<li>在 Charles 的菜单栏选择 “Proxy”–&gt;“Recording Settings”，然后选择 Include 栏，选择add一个项目，然后填入需要监控的协议，主机地址，端口号。这样就可以只截取目标网站的封包</li>
<li>在想过滤的网络请求上右击，选择 “Focus”，之后在 Filter 一栏勾选上 Focussed 一项，这种方式可以临时性的，快速地过滤出一些没有通过关键字的一类网络请求</li>
</ol>
<h3 id="截取网络包iphone">截取网络包（iPhone）</h3>
<ol>
<li>要将 Charles 的代理功能打开。在 Charles 的菜单栏上选择 “Proxy”–&gt;“Proxy Settings”，填入代理端口 8888，并且勾上 “Enable transparent HTTP proxying” 。</li>
<li>在 Charles 的菜单栏上选择 “Proxy”–&gt;“Proxy Settings”，填入代理端口 8888，并且勾上 “Enable transparent HTTP proxying” 。</li>
<li>获取 Charles 运行所在电脑的 IP 地址，Charles 的顶部菜单的 “Help”–&gt;“Local IP Address”。</li>
<li>在 iPhone 的 “ 设置 ”–&gt;“ 无线局域网 ” 中，可以看到当前连接的 wifi 名，通过点击右边的详情键，可以看到当前连接上的 wifi 的详细信息，包括 IP 地址，子网掩码等信息。在其最底部有「HTTP 代理」一项，我们将其切换成手动，然后填上 Charles 运行所在的电脑的 IP，以及端口号 8888</li>
</ol>
<h3 id="证书安装针对https">证书安装（针对Https）</h3>
<ol>
<li>首先我们需要在 Mac 电脑上安装证书。点击 Charles 的顶部菜单，选择 “Help” –&gt; “SSL Proxying” –&gt; “Install Charles Root Certificate”，然后输入系统的帐号密码，即可在 KeyChain 看到添加好的证书</li>
<li>点击 Charles 的顶部菜单，选择 “Help” –&gt; “SSL Proxying” –&gt; “Install Charles Root Certificate on a Mobile Device or Remote Browser”，然后就可以看到 Charles 弹出的简单的安装教程。</li>
<li>按照我们之前说的教程，在设备上设置好 Charles 为代理后，在手机浏览器中访问地址：<a href="https://link.jianshu.com?t=http%3A%2F%2Fcharlesproxy.com%2Fgetssl">http://charlesproxy.com/getssl</a>，即可打开证书安装的界面，安装完证书后，就可以截取手机上的 Https 通讯内容了。不过同样需要注意，默认情况下 Charles 并不做截取，你还需要在要截取的网络请求上右击，选择 SSL proxy 菜单项。</li>
</ol>
<blockquote>
<p>需要注意的是，即使是安装完证书之后，Charles 默认也并不截取 Https 网络通讯的信息，如果你想对截取某个网站上的所有 Https 网络请求，可以在该请求上右击，选择 SSL proxy这样，对于该 Host 的所有 SSL 请求可以被截取到了。</p>
</blockquote>
<h2 id="参考">参考</h2>
<p><a href="https://www.jianshu.com/p/15869111a6ff">Mac下Charles的使用教程</a></p>
]]></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://melvini.com/categories/tech/">tech</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://melvini.com/tags/charles/">charles</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Mysql</title>
                <link>https://melvini.com/tech/mysql/</link>
                <guid isPermaLink="true">https://melvini.com/tech/mysql/</guid>
                <pubDate>Fri, 29 Jun 2018 16:39:35 +0800</pubDate>
                
                
                
                    <description><![CDATA[<pre><code>-- 日期转换为时间戳
select UNIX_TIMESTAMP('2019-1-31');

-- 时间戳转换为日期
select FROM_UNIXTIME('1548864000','%Y%m%d');

-- 格式为YMD格式
DATE_FORMAT(NOW(), '%Y%m%d');
</code></pre><pre><code>-- having或where（有聚合函数（如sum、count）时，只能用having）
SELECT count(*) AS q, SUM(money) AS amount，`trade_id`,`sku_id` FROM 
`pre_jingdong_tmp` 
GROUP BY `trade_id`,`sku_id` 
HAVING q &gt; 1 AND amount = 0
</code></pre><pre><code>-- 批量替换
update pre_image_list 
set image_url = 
replace( image_url, 'images/', 'http://baidu.com/images/1.png' );
</code></pre><h2 id="何时使用find_in_set-inlike">何时使用find_in_set() 、in()、like</h2>
<p>FIND_IN_SET(str,strlist)</p>
<blockquote>
<p>str:要查询的字符串。strlist 字段名:参数以”,”分隔 如 (1,2,6,8)</p>
</blockquote>
<pre><code>select * from treenodes where FIND_IN_SET(id, '1,2,3,4,5');
</code></pre><p>类似in()</p>
<pre><code>select * from treenodes where id in (1,2,3,4,5);
</code></pre><ul>
<li>find_in_set()和in的区别：
<pre><code>SELECT id,name,list from tb_test WHERE 'dd' IN ('li', 'sa', 'dd');
</code></pre><pre><code>SELECT id,name,list from tb_test WHERE FIND_IN_SET('dd',list);
</code></pre><p>如果list是常量，则可以直接用IN， 否则要用find_in_set()函数</p>
</li>
<li>find_in_set()和like的区别：
like是广泛的模糊匹配，字符串中没有分隔符，Find_IN_SET 是精确匹配，字段值以英文”,”分隔，Find_IN_SET查询的结果要小于like查询的结果。</li>
</ul>
<h3 id="索引的类型">索引的类型</h3>
<ul>
<li>主键索引 primary ：主键索引是一种特殊的唯一索引，不允许有空值</li>
<li>普通索引 index</li>
<li>复合索引：复合索引指多个字段上创建的索引，只有在查询条件中使用了创建索引时的第一个字段，索引才会被使用。使用复合索引时遵循最左前缀集合</li>
<li>唯一索引 unique</li>
<li>全文索引 fulltext</li>
<li>空间索引 spatial ：空间索引是对空间数据类型的字段建立的索引，MYSQL中的空间数据类型有4种，分别是GEOMETRY、POINT、LINESTRING、POLYGON。</li>
</ul>
<h3 id="数据结构">数据结构</h3>
<p>​		B+树索引( O(log(n)) )。红黑树等数据结构也可以用来实现索引，但是文件系统及数据库系统普遍采用B-/+Tree作为索引结构。</p>
<h3 id="建议索引的场景">建议索引的场景</h3>
<ol>
<li>只在合理的字段行建立索引。例如：用来当查询条件的字段</li>
<li>在数据的维度（区别度）比较大的字段上建立索引，否则会使得数据比例过大，转为全表扫描。</li>
<li>当多个单字段索引发生冲突时，强制使用某个索引。</li>
<li>优先对数据量比较小的字段建立索引，可以使索引文件更小，同时内存中也可以装载更多的索引键</li>
<li>长字符串可以使用前缀索引，只对字符串的前面一定字符长度建立索引。</li>
<li>尽量的扩展索引，不要新建索引。比如表中已经有a的索引，现在要加(a,b)的索引，那么只需要修改原来的索引即可。</li>
<li>索引列不能参与计算，保持列“干净”</li>
<li>最左前缀匹配原则，非常重要的原则，mysql会一直向右匹配直到遇到范围查询(&gt;、&lt;、between、like)就停止匹配</li>
</ol>
<h3 id="索引不生效的场景">索引不生效的场景</h3>
<ul>
<li>语句中带有or的时候，索引会失效</li>
<li>索引的字段使用like查询，并且使用了<code>前通配</code>，后通配会生效</li>
<li>当索引的字段是字符类型，但是储存的值是数字，比如 user_name:’123456’，在查询语句中要 user_name = ‘123456’而<code>不能</code> user_name = 123456 否则发生类型转换，索引失效</li>
<li>语句中出现列数据运算才判断的，比如where age – 10 &gt; 0 每一行都要运算之后才知道是否大于0 所以就是全表扫描，如果age &gt; 10 则可使用索引。使用函数转换列数据也一样原理。</li>
<li>组合索引时使用的条件语句</li>
</ul>
<h3 id="慢查询优化基本步骤">慢查询优化基本步骤</h3>
<ol>
<li>先运行看看是否真的很慢，注意设置SQL_NO_CACHE</li>
<li>where条件单表查，锁定最小返回记录表。这句话的意思是把查询语句的where都应用到表中返回的记录数最小的表开始查起，单表每个字段分别查询，看哪个字段的区分度最高</li>
<li>explain查看执行计划，是否与1预期一致（从锁定记录较少的表开始查询）</li>
<li>order by limit 形式的sql语句让排序的表优先查</li>
<li>了解业务方使用场景</li>
<li>加索引时参照建索引的几大原则</li>
<li>观察结果，不符合预期继续从头分析</li>
</ol>
<h3 id="参考">参考</h3>
<ul>
<li><a href="https://segmentfault.com/q/1010000003832312">Mysql有哪些索引类型？</a></li>
<li><a href="http://blog.codinglabs.org/articles/theory-of-mysql-index.html">MySQL索引背后的数据结构及算法原理</a></li>
<li><a href="https://tech.meituan.com/2014/06/30/mysql-index.html">Mysql索引原理及慢查询优化</a></li>
<li><a href="https://www.siammm.cn/archives/100">Mysql合理建立索引及优化</a></li>
</ul>
]]></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://melvini.com/categories/tech/">tech</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://melvini.com/tags/mysql/">Mysql</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Alfred</title>
                <link>https://melvini.com/tech/alfred/</link>
                <guid isPermaLink="true">https://melvini.com/tech/alfred/</guid>
                <pubDate>Wed, 02 May 2018 16:32:54 +0800</pubDate>
                
                
                
                    <description><![CDATA[<h2 id="插件搜索">插件搜索</h2>
<ul>
<li><a href="http://www.packal.org/">packal</a></li>
<li><a href="http://www.alfredworkflow.com/">alfredworkflow</a></li>
<li><a href="https://github.com/">Github</a></li>
</ul>
<h2 id="相关资料">相关资料</h2>
<ul>
<li><a href="https://www.jianshu.com/p/0e78168da7ab">Mac效率神器Alfred以及常用Workflow</a></li>
<li><a href="http://louiszhai.github.io/2018/05/31/alfred/">Alfred使用手册</a></li>
<li><a href="https://hufangyun.com/2018/alfred-workflow-recommend/">常用Workflow插件</a></li>
</ul>
]]></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://melvini.com/categories/tech/">tech</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://melvini.com/tags/alfred/">Alfred</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>PHP函数</title>
                <link>https://melvini.com/tech/php%E5%87%BD%E6%95%B0/</link>
                <guid isPermaLink="true">https://melvini.com/tech/php%E5%87%BD%E6%95%B0/</guid>
                <pubDate>Fri, 03 Nov 2017 16:24:58 +0800</pubDate>
                
                
                
                    <description><![CDATA[<h3 id="strtotime">strtotime()</h3>
<pre><code>date( &quot;Y-m&quot;, strtotime( &quot;+1 month&quot;,strtotime(&quot;2018-01-31&quot;)));
</code></pre><p>预期的结果是：2017-02，而实际得出的是：2017-03。原因在于二月是没有三十一号，多余的天数会加到三月份。解决方法有两种：</p>
<pre><code>strtotime( &quot;first day of +1 month&quot;,strtotime(&quot;2017-01-31&quot;));

strtotime( &quot;+1 month&quot;,strtotime(&quot;2017-01-01&quot;));
</code></pre><h3 id="strpos">strpos()</h3>
<p>查看官方文档的解释：此函数可能返回布尔值 FALSE，但也可能返回等同于 FALSE 的非布尔值。请阅读 布尔类型章节以获取更多信息。应使用 === 运算符来测试此函数的返回值。可以看出 === TRUE 这种判断是错的，应使用！== FALSE 来判断为真</p>
<pre><code>if(strpos(&quot;to be better&quot;,&quot;better&quot;) !== FALSE){...}

if(strpos(&quot;to be better&quot;,&quot;better&quot;) === FALSE){...}
</code></pre><h3 id="urlencode-和-urldecode">urlencode 和 urldecode</h3>
<p>urlencode () 函数原理就是首先把中文字符转换为十六进制，然后在每个字符前面加一个标识符 %，对字符串中除了 -_. 之外的所有非字母数字字符都将被替换成百分号（%）后跟两位十六进制数，空格则编码为加号（+）。</p>
<p>urldecode () 函数与 urlencode () 函数原理相反，用于解码已编码的 URL 字符串，其原理就是把十六进制字符串转换为中文字符。</p>
]]></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://melvini.com/categories/tech/">tech</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://melvini.com/tags/php/">PHP</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Git命令</title>
                <link>https://melvini.com/tech/git%E5%91%BD%E4%BB%A4/</link>
                <guid isPermaLink="true">https://melvini.com/tech/git%E5%91%BD%E4%BB%A4/</guid>
                <pubDate>Thu, 29 Jun 2017 16:39:35 +0800</pubDate>
                
                
                
                    <description><![CDATA[<pre><code>git init

git add .

git commit -m &quot;First commit&quot;

git remote add origin {远程仓库地址}

git remote -v

git pull origin master

git push -u origin master
</code></pre><h3 id="合并冲突">合并冲突</h3>
<p><strong>refusing to merge unrelated histories</strong></p>
<pre><code># 允许合并不相关的内容
git pull --allow-unrelated-histories

# 提交内容
git push
</code></pre><p><strong><strong>non-fast-forward</strong></strong></p>
<pre><code># 强推，本地代码强行覆盖远程`git`仓库
git push -f
</code></pre><p><strong>忽略文件</strong></p>
<pre><code>git update-index --assume-unchanged ../config/config.php
</code></pre><h3 id="push多个git地址">PUSH多个Git地址</h3>
<pre><code># 配置远程仓库
git remote add origin https://url

# 再添加一个远程仓库
git remote set-url --add origin https://url
</code></pre><p>可以在 .git/config 里查看是否添加成功</p>
]]></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://melvini.com/categories/tech/">tech</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://melvini.com/tags/git/">Git</category>
                                
                            
                        
                    
                
            </item>
        
    </channel>
</rss>
