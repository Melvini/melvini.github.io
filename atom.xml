<?xml version="1.0" encoding="utf-8"?>


<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh-CN">
    <title type="text">melvini</title>
    <subtitle type="html">MemE 是一个强大且可高度定制的 GoHugo 博客主题，专为个人博客设计。</subtitle>
    <updated>2020-04-06T11:27:34+08:00</updated>
    <id>https://melvini.com/</id>
    <link rel="alternate" type="text/html" href="https://melvini.com/" />
    <link rel="self" type="application/atom+xml" href="https://melvini.com/atom.xml" />
    <author>
            <name>melvini</name>
            <uri>https://melvini.com/</uri>
            
                <email>allen897577@gmail.com</email>
            </author>
    <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    <generator uri="https://gohugo.io/" version="0.65.3">Hugo</generator>
        <entry>
            <title type="text">我的事说来话长</title>
            <link rel="alternate" type="text/html" href="https://melvini.com/notes/%E6%88%91%E7%9A%84%E4%BA%8B%E8%AF%B4%E6%9D%A5%E8%AF%9D%E9%95%BF/" />
            <id>https://melvini.com/notes/%E6%88%91%E7%9A%84%E4%BA%8B%E8%AF%B4%E6%9D%A5%E8%AF%9D%E9%95%BF/</id>
            <updated>2020-03-29T20:38:08+08:00</updated>
            <published>2019-12-15T10:45:50+08:00</published>
            <author>
                    <name>melvini</name>
                    <uri>https://melvini.com/</uri>
                    <email>allen897577@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    
    <summary type="html"><![CDATA[31岁啃老男，创业失败后在家啃老六年。美其名曰：只是在寻找自己想做的事情。只不过，找……]]></summary>
            
                <content type="html"><![CDATA[<p><img src="/media/wodeshi.jpg" alt="我的事"></p>
<p>　　31岁啃老男，创业失败后在家啃老六年。美其名曰：只是在寻找自己想做的事情。只不过，找了六年还没找到而已。</p>
<p>　　倘若家里的财产足以支撑基本的生活开支（比如，在一线城市住着一套房子，还有一套收租金这种规模的迷你资本家），人到底为什么要工作？</p>
<p>　　所以，人到底为什么要工作？或者说，为什么要努力工作？最简单的答案：为了吃饱喝足，为了更好的生活。再正当不过的理由。如果家里揭不开锅，当然得工作，工地上的工人，公园里的保姆，没有余裕去思考这个问题，他们没有不工作这个选项。</p>
<p>　　倒数第二集，男主角在工作日的街上看着工作的人们，搬家公司的工人，店里的伙计，大家都在勤勤恳恳地做着平凡的工作，努力过好自己的生活。男主角流着泪向社会迈出的这一步，大概也是一种充满无奈的成长。
工作只是工作，如此而已。就算不能实现梦想，也可以养活自己，让母亲放心，让姐姐开心。下班之后，可以更心安理得地回到家，和家人一起享受美味的食物，讲着好笑的废话，如同扫地机器人回到充电桩一样。</p>
<p>　　不是为了无尽的物质欲望，也不是为了梦想的空洞说辞，更不是为了国家富强民族振兴，而是想要作为一个社会人得到亲人朋友的认可。</p>
]]></content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://melvini.com/categories/notes/" term="notes" label="notes" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://melvini.com/tags/movie/" term="movie" label="movie" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">人间失格</title>
            <link rel="alternate" type="text/html" href="https://melvini.com/notes/%E4%BA%BA%E9%97%B4%E5%A4%B1%E6%A0%BC/" />
            <id>https://melvini.com/notes/%E4%BA%BA%E9%97%B4%E5%A4%B1%E6%A0%BC/</id>
            <updated>2020-03-29T20:46:07+08:00</updated>
            <published>2019-11-28T10:45:50+08:00</published>
            <author>
                    <name>melvini</name>
                    <uri>https://melvini.com/</uri>
                    <email>allen897577@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    
    <summary type="html"><![CDATA[最近网上冲浪的时候，经常能看到'生而为人，我很抱歉'这句话，出自太宰治的《人间失格》……]]></summary>
            
                <content type="html"><![CDATA[<p><img src="/media/renjianshige.jpg" alt="人间失格">
　　最近网上冲浪的时候，经常能看到'生而为人，我很抱歉'这句话，出自太宰治的《人间失格》。于是用上下班的通勤时间，看完了这本书。读完后，整个人是比较压抑的，文中非常多的心理描写与隐喻，直勾勾的映射了现代社会的某些问题，在读这本书的时候，一些事件与人物的内心侧写，会让人有点感同身受。</p>
<p>　　透过主角叶藏的人生遭遇，太宰治可以说巧妙地将自己的一生与思想表达出来。主角内心敏感，童年刻板严肃的家族生活使他从小就会看人眼色，因为看得太清楚，所以也太痛苦。对于主人公来说，痛苦才是他的常态，逃离这个世界才是他的目的，大部分时候，他都是消极悲观地在残喘着。这本书可以说是作者对自己的剖析，人生的理解，从滞涩的文中更可体会其内心深切的苦楚。</p>
<blockquote>
<p>相互轻蔑却又彼此来往 并一起自我作贱——这就是世上所谓“朋友”的真面目。」</p>
</blockquote>
<blockquote>
<p>若能避开猛烈的狂喜，自然不会有悲痛来袭。」</p>
</blockquote>
<blockquote>
<p>我的不幸，恰恰在于我缺乏拒绝的能力。我害怕一旦拒绝别人，便会在彼此心里留下永远无法愈合的裂痕。」</p>
</blockquote>
]]></content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://melvini.com/categories/notes/" term="notes" label="notes" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://melvini.com/tags/book/" term="book" label="book" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">灌汤包</title>
            <link rel="alternate" type="text/html" href="https://melvini.com/cook/%E7%81%8C%E6%B1%A4%E5%8C%85/" />
            <id>https://melvini.com/cook/%E7%81%8C%E6%B1%A4%E5%8C%85/</id>
            <updated>2020-04-06T11:27:14+08:00</updated>
            <published>2019-10-18T22:46:16+08:00</published>
            <author>
                    <name>melvini</name>
                    <uri>https://melvini.com/</uri>
                    <email>allen897577@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    
    <summary type="html"><![CDATA[用料 猪皮冻 将猪皮洗干净，然后煮十分钟，刮干净肥肉和猪毛 用水冲净后，冷水下锅煮十分钟左……]]></summary>
            
                <content type="html"><![CDATA[<h3 id="用料">用料</h3>
<ul>
<li>
<p>猪皮冻</p>
<ol>
<li>将猪皮洗干净，然后煮十分钟，刮干净肥肉和猪毛</li>
<li>用水冲净后，冷水下锅煮十分钟左右，煮到能用筷子轻易戳通</li>
<li>将猪皮放入破壁机中打好，将打好的猪皮液放入锅中煮，直到水开后，倒入盆里，捞掉杂质放冰箱冷藏</li>
</ol>
<blockquote>
<p>嫌麻烦或怕做不好的话，可以到淘宝或京东上买</p>
</blockquote>
</li>
<li>
<p>猪肉馅</p>
<ol>
<li>加入葱姜去腥，然后根据个人口味加入调味料：盐、生抽、料酒、鸡精、白胡椒粉...</li>
<li>加入猪皮冻，1:1的比例较好，</li>
</ol>
</li>
<li>
<p>饺子皮</p>
<p>面粉、盐、开水，搅拌，再加冷水，搅拌，揉光滑，装入保鲜袋醒发半小时以上，夏天要放冰箱醒。</p>
<blockquote>
<p>建议直接去饺子皮店买</p>
</blockquote>
</li>
</ul>
<h3 id="步骤">步骤</h3>
<ul>
<li>
<p>包包子</p>
</li>
<li>
<p>包子尽量放在可以一个一个装的盒子里，套上保鲜膜。这样做是为了防止汤包裂开</p>
</li>
<li>
<p>蒸包子：5-10min，速冻过的汤包，蒸的时间会长些</p>
</li>
</ul>
<p>​</p>
]]></content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://melvini.com/categories/cook/" term="cook" label="cook" />
                            
                        
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">迁移到hugo</title>
            <link rel="alternate" type="text/html" href="https://melvini.com/coding/%E8%BF%81%E7%A7%BB%E5%88%B0hugo/" />
            <id>https://melvini.com/coding/%E8%BF%81%E7%A7%BB%E5%88%B0hugo/</id>
            <updated>2020-03-29T15:19:12+08:00</updated>
            <published>2019-09-15T00:23:08+08:00</published>
            <author>
                    <name>melvini</name>
                    <uri>https://melvini.com/</uri>
                    <email>allen897577@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    
    <summary type="html"><![CDATA[Hugo安装 1 2 3 4 5 6 7 # 安装 brew install hugo # 生成站点 hugo new site ./myblog 安装主题 1 2 3 4 5 6 7 8 9 #……]]></summary>
            
                <content type="html"><![CDATA[<h2 id="hugo安装">Hugo安装</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">
<span class="c1"># 安装</span>
brew install hugo

<span class="c1"># 生成站点</span>
hugo new site ./myblog

</code></pre></td></tr></table>
</div>
</div><h2 id="安装主题">安装主题</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># 下载对应主题。如果要修改主题样式，修改完后要从新编译</span>

git clone https://github.com/olOwOlo/hugo-theme-even themes/even

<span class="nb">cd</span> ./themes/even/

yarn install

yarn build
</code></pre></td></tr></table>
</div>
</div><h2 id="生成目录">生成目录</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># 所有静态页面都会生成到public目录，将此提交到远程进行网站部署</span>

<span class="nb">cd</span> public

git init

git remote add origin https://github.com/coderzh/coderzh.github.io.git

git add .

git commit -m <span class="s2">&#34;</span><span class="nv">$msg</span><span class="s2">&#34;</span>

git push origin master --force

<span class="nb">cd</span> ..
</code></pre></td></tr></table>
</div>
</div><h3 id="常用命令">常用命令</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># 创建文章</span>
hugo new /post/迁移到Hugo.md

<span class="c1"># 本地调试</span>
hugo server 
</code></pre></td></tr></table>
</div>
</div>]]></content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://melvini.com/categories/coding/" term="coding" label="coding" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://melvini.com/tags/hugo/" term="hugo" label="hugo" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">使用supervisor管理进程</title>
            <link rel="alternate" type="text/html" href="https://melvini.com/coding/supervisor%E7%AE%A1%E7%90%86%E8%BF%9B%E7%A8%8B/" />
            <id>https://melvini.com/coding/supervisor%E7%AE%A1%E7%90%86%E8%BF%9B%E7%A8%8B/</id>
            <updated>2020-03-28T14:19:13+08:00</updated>
            <published>2019-09-02T16:08:25+08:00</published>
            <author>
                    <name>melvini</name>
                    <uri>https://melvini.com/</uri>
                    <email>allen897577@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    
    <summary type="html"><![CDATA[最近有一些常驻内存的php脚本，为了便于管理进程的开关重启，使用了superviso……]]></summary>
            
                <content type="html"><![CDATA[<p>最近有一些常驻内存的php脚本，为了便于管理进程的开关重启，使用了supervisor，效果很不错</p>
<h2 id="安装">安装</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">brew install supervisor
</code></pre></td></tr></table>
</div>
</div><p>可以运行在 Linux、Mac OS X 上。Linux参考此文章：<a href="http://liyangliang.me/posts/2015/06/using-supervisor/">使用supervisor管理进程</a></p>
<h2 id="配置">配置</h2>
<p>手动开启</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">supervisord -c /usr/local/etc/supervisord.ini
</code></pre></td></tr></table>
</div>
</div><p>随系统启动</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">brew services start supervisor
</code></pre></td></tr></table>
</div>
</div><p>安装目录在： <code>/usr/local/Cellar/supervisor/3.3.5/bin</code></p>
<p>配置文件：<code>/usr/local/etc/supervisord.ini</code></p>
<p>子配置，则在 supervisord.ini 文件末尾，</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="o">[</span>include<span class="o">]</span>

<span class="nv">files</span> <span class="o">=</span> /usr/local/etc/supervisor.d/*.ini
</code></pre></td></tr></table>
</div>
</div><p>启动新创建子进程配置文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ supervisorctl reread

$ supervisorctl update
</code></pre></td></tr></table>
</div>
</div><p>查看子进程运行情况</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ sudo supervisorctl 
</code></pre></td></tr></table>
</div>
</div><p>配置文件书写格式</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="o">[</span>program:laravel-worker<span class="o">]</span> <span class="p">;</span><span class="o">[</span>program:xx<span class="o">]</span>是被管理的进程配置参数，tomcat是进程的名称

<span class="nv">command</span><span class="o">=</span>php /usr/local/var/www/laravel/artisan queue:work     <span class="p">;</span>在supervisord启动的时候也自动启动

<span class="nv">autostart</span><span class="o">=</span><span class="nb">true</span>         <span class="p">;</span>在supervisord启动的时候也自动启动

<span class="nv">startsecs</span><span class="o">=</span><span class="m">10</span>          <span class="p">;</span>启动10秒后没有异常退出，就表示进程正常启动了，默认为1秒

<span class="nv">autorestart</span><span class="o">=</span><span class="nb">true</span>        <span class="p">;</span>程序退出后自动重启，可选值:<span class="o">[</span>unexpected,true,flase<span class="o">]</span>,默认为unexpected，表示进程意味杀死后才重启

<span class="nv">startretries</span><span class="o">=</span><span class="m">3</span>         <span class="p">;</span>启动失败自动重试次数，默认是3

<span class="nv">user</span><span class="o">=</span>root            <span class="p">;</span>用哪个用户启动进程，默认是root

<span class="nv">priority</span><span class="o">=</span><span class="m">999</span>          <span class="p">;</span>进行启动优先级，默认999，值小的优先启动

<span class="nv">redirect_stderr</span><span class="o">=</span><span class="nb">true</span>      <span class="p">;</span>把stderr重定向到stdout，默认false

<span class="nv">stdout_logfile_maxbytes</span><span class="o">=</span>20MB  <span class="p">;</span>stdout日志文件大小，默认50MB

<span class="nv">stdout_logfile_backups</span><span class="o">=</span><span class="m">20</span>    <span class="p">;</span>stdout日志文件备份数，默认是10

<span class="p">;</span>stdout日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录<span class="o">(</span>supervisord会自动创建日志文件<span class="o">)</span>

<span class="nv">stdout_logfile</span><span class="o">=</span>/usr/local/var/www/laravel/storage/logs/queue.log

<span class="nv">stopasgroup</span><span class="o">=</span><span class="nb">false</span>        <span class="p">;</span>默认为false，进程被杀死时，是否向这个进程组发送stop信号，包括子进程

<span class="nv">killasgroup</span><span class="o">=</span><span class="nb">false</span>        <span class="p">;</span>默认为false,向进程组发送kill信号，包括子进程
</code></pre></td></tr></table>
</div>
</div>]]></content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://melvini.com/categories/coding/" term="coding" label="coding" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://melvini.com/tags/python/" term="python" label="python" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">幸福感的重要性</title>
            <link rel="alternate" type="text/html" href="https://melvini.com/life/%E5%B9%B8%E7%A6%8F%E6%84%9F%E7%9A%84%E9%87%8D%E8%A6%81%E6%80%A7/" />
            <id>https://melvini.com/life/%E5%B9%B8%E7%A6%8F%E6%84%9F%E7%9A%84%E9%87%8D%E8%A6%81%E6%80%A7/</id>
            <updated>2020-03-29T23:10:58+08:00</updated>
            <published>2019-07-02T22:46:16+08:00</published>
            <author>
                    <name>melvini</name>
                    <uri>https://melvini.com/</uri>
                    <email>allen897577@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    
    <summary type="html"><![CDATA[最近在微博上看到了一篇文章，讲到了作家三毛和她的一名读者之间的来信： 读者工作好多年了……]]></summary>
            
                <content type="html"><![CDATA[<p>　　最近在微博上看到了一篇文章，讲到了作家三毛和她的一名读者之间的来信：</p>
<blockquote>
<p>　　读者工作好多年了，在一家公司从事着最底层的职位，下班后，回到自己租的斗室里，面对物质和精神相当贫乏的人生，她很自卑，觉得活着的价值...。</p>
<p>　　三毛回复说，当她看到来信时很惊讶，她觉得读者正当年轻之时，却用底层、贫乏、自卑等形容自己。三毛也谈到自己对人生价值的理解：寻求真正的自由，然后享受生命。随后她说道：如果她是读者，首先她会布置一下自己的“斗室”，花上一点小钱，给房间买一些装饰品并稍微打扮下自己，然后她会利用下班后的时间，去报名学一门自己感兴趣的爱好，慢慢的她的人生也在改变，上课的时候或许会交到一些朋友，偶尔可以请朋友到她的小房间一起聊生活和理想...</p>
</blockquote>
<p>　　其实很多人有过类似的遭遇。在生活、工作中往往会遇到不幸的事，此时焦虑、无奈等负面情绪控制了我们的大脑，甚至会影响他人。如何抵抗这些负面情绪呢，正如三毛给读者建议的，拿你目前能想到的方法：寻找那些能让你感到幸福感的人或事。要知道，生命中还有很多有趣的事值得我们去追寻与思考。</p>
<p>​</p>
]]></content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://melvini.com/categories/life/" term="life" label="life" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://melvini.com/tags/diary/" term="diary" label="diary" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">laravel框架</title>
            <link rel="alternate" type="text/html" href="https://melvini.com/coding/laravel%E6%A1%86%E6%9E%B6/" />
            <id>https://melvini.com/coding/laravel%E6%A1%86%E6%9E%B6/</id>
            <updated>2020-03-28T10:39:10+08:00</updated>
            <published>2019-06-03T17:39:39+08:00</published>
            <author>
                    <name>melvini</name>
                    <uri>https://melvini.com/</uri>
                    <email>allen897577@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    
    <summary type="html"><![CDATA[安装 通过laravel安装器 1 2 composer global require &#34;laravel/installer&#34; laravel new blog 通过 Composer 创建项目 配置读写权限 1 2 3 4 composer create-project……]]></summary>
            
                <content type="html"><![CDATA[<h2 id="安装">安装</h2>
<ol>
<li>
<p>通过laravel安装器</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">composer global require <span class="s2">&#34;laravel/installer&#34;</span>
laravel new blog
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>通过 Composer 创建项目</p>
</li>
<li>
<p>配置读写权限</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">composer create-project --prefer-dist laravel/laravel blog <span class="s2">&#34;5.7.*&#34;</span>
   
chmod -R o+w blog/storage
chmod -R o+w blog/bootstrap/cache
</code></pre></td></tr></table>
</div>
</div></li>
</ol>
<h2 id="解决http-500问题">解决HTTP 500问题</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">sudo chmod -R <span class="m">755</span> laravel_blog
chmod -R o+w laravel_blog/storage

php artisan key:generate

php artisan cache:clear

php artisan config:clear

composer dump-autoload
</code></pre></td></tr></table>
</div>
</div><h2 id="生成app_key">生成APP_KEY</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">php artisan key:generate
</code></pre></td></tr></table>
</div>
</div><h2 id="创建模型和控制器">创建模型和控制器</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">php artisan make:model App<span class="se">\\</span>Models<span class="se">\\</span>User

php artisan admin:make UserController --model<span class="o">=</span>App<span class="se">\\</span>Models<span class="se">\\</span>User

-- 如果你是windows，则只用一个<span class="se">\单</span>斜杠
</code></pre></td></tr></table>
</div>
</div><h2 id="数据库迁徙">数据库迁徙</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">php artisan make:migration create_users_table

php artisan make:migration add_votes_to_users_table --table<span class="o">=</span>users

php artisan make:migration add_votes_to_users_table --create<span class="o">=</span>users

php artisan migrate
</code></pre></td></tr></table>
</div>
</div><h2 id="laravel-admin使用">Laravel-admin使用</h2>
<p>首先确保安装好了<code>laravel</code>，并且数据库连接设置正确。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">composer require encore/laravel-admin
</code></pre></td></tr></table>
</div>
</div><p>然后运行下面的命令来发布资源：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">php artisan vendor:publish --provider<span class="o">=</span><span class="s2">&#34;Encore\Admin\AdminServiceProvider&#34;</span>
</code></pre></td></tr></table>
</div>
</div><p>在该命令会生成配置文件<code>config/admin.php</code>，可以在里面修改安装的地址、数据库连接、以及表名，建议都是用默认配置不修改。</p>
<p>然后运行下面的命令完成安装：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">php artisan admin:install
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>运行这个命令的时候，如果遇到了下面的错误:SQLSTATE[42000]: Syntax error or access violation: 1071 Specified key was too long; max key length is 1000 bytes (SQL: alter tableusersadd uniqueusers_email_unique(email))参考这个issue来解决 https://github.com/z-song/laravel-admin/issues/1541</p>
</blockquote>
<p>启动服务后，在浏览器打开 <code>http://localhost/admin/</code> ,使用用户名 <code>admin</code> 和密码 <code>admin</code>登录.</p>
<p><strong>发生错误：Disk [admin] not configured, please add a disk config</strong> in <code>config/filesystems.php</code>.</p>
<p>添加admn配置，如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php">&#39;disks&#39; =&gt; [
&#39;local&#39; =&gt; [
    &#39;driver&#39; =&gt; &#39;local&#39;,
    &#39;root&#39; =&gt; storage_path(&#39;app&#39;),
],

&#39;public&#39; =&gt; [
    &#39;driver&#39; =&gt; &#39;local&#39;,
    &#39;root&#39; =&gt; storage_path(&#39;app/public&#39;),
    &#39;url&#39; =&gt; env(&#39;APP_URL&#39;).&#39;/storage&#39;,
    &#39;visibility&#39; =&gt; &#39;public&#39;,
],

&#39;s3&#39; =&gt; [
    &#39;driver&#39; =&gt; &#39;s3&#39;,
    &#39;key&#39; =&gt; env(&#39;AWS_KEY&#39;),
    &#39;secret&#39; =&gt; env(&#39;AWS_SECRET&#39;),
    &#39;region&#39; =&gt; env(&#39;AWS_REGION&#39;),
    &#39;bucket&#39; =&gt; env(&#39;AWS_BUCKET&#39;),
],
&#39;admin&#39; =&gt; [
    &#39;driver&#39;     =&gt; &#39;local&#39;,
    &#39;root&#39;       =&gt; public_path(&#39;upload&#39;),
    &#39;visibility&#39; =&gt; &#39;public&#39;,
    &#39;url&#39; =&gt; env(&#39;APP_URL&#39;).&#39;/public/upload/&#39;,
],

/**
     * Make a grid builder.
     *
     * @return Grid
     */
    protected function grid()
    {
        $grid = new Grid(new Article);
 
        $grid-&gt;id(&#39;ID&#39;)-&gt;sortable();
        $grid-&gt;title(&#39;文章标题&#39;);
        $grid-&gt;created_at(&#39;创建时间&#39;);
        $grid-&gt;updated_at(&#39;修改时间&#39;);
 
        return $grid;
    }
 
    /**
     * Make a show builder.
     *
     * @param mixed   $id
     * @return Show
     */
    protected function detail($id)
    {
        $show = new Show(Article::findOrFail($id));
 
        $show-&gt;id(&#39;文章ID&#39;);
        $show-&gt;title(&#39;文章标题&#39;);
        $show-&gt;content(&#39;文章内容&#39;);
        $show-&gt;created_at(&#39;创建时间&#39;);
        $show-&gt;updated_at(&#39;修改时间&#39;);
 
        return $show;
    }
 
    /**
     * Make a form builder.
     *
     * @return Form
     */
    protected function form()
    {
        $form = new Form(new Article);
 
        $form-&gt;text(&#39;title&#39;,&#39;文章标题&#39;);
        $form-&gt;textarea(&#39;content&#39;,&#39;文章内容&#39;);
 
        $form-&gt;display(&#39;id&#39;, &#39;文章ID&#39;);
        $form-&gt;display(&#39;created_at&#39;, &#39;创建时间&#39;);
        $form-&gt;display(&#39;updated_at&#39;, &#39;修改时间&#39;);
 
        return $form;
    }
}
</code></pre></td></tr></table>
</div>
</div><h2 id="api接口">API接口</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php">composer require dingo/api

php artisan vendor:publish // 选择Dingo

API_STANDARDS_TREE=prs

API_PREFIX=api // 通过 melvini.com/api来访问 API。

API_DOMAIN=[api.melvini.com](http://api.larabbs.com/) // 单独子域名

$api = app(&#39;Dingo\Api\Routing\Router&#39;);
$api-&gt;version(&#39;v1&#39;, [
&#39;namespace&#39; =&gt; &#39;App\Http\Controllers\Api&#39;
], function($api) { // 短信验证码
$api-&gt;post(&#39;main&#39;, &#39;mainController&#39;) 
		-&gt;name(&#39;api.main.list&#39;);
});
</code></pre></td></tr></table>
</div>
</div>]]></content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://melvini.com/categories/coding/" term="coding" label="coding" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://melvini.com/tags/php/" term="php" label="php" />
                            
                        
                            
                            
                            
                                <category scheme="https://melvini.com/tags/laravel/" term="laravel" label="laravel" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">葱花鸡蛋饼</title>
            <link rel="alternate" type="text/html" href="https://melvini.com/cook/%E8%91%B1%E8%8A%B1%E9%B8%A1%E8%9B%8B%E9%A5%BC/" />
            <id>https://melvini.com/cook/%E8%91%B1%E8%8A%B1%E9%B8%A1%E8%9B%8B%E9%A5%BC/</id>
            <updated>2020-04-05T22:21:00+08:00</updated>
            <published>2019-03-18T22:46:16+08:00</published>
            <author>
                    <name>melvini</name>
                    <uri>https://melvini.com/</uri>
                    <email>allen897577@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    
    <summary type="html"><![CDATA[用料 鸡蛋：4个 面粉：140g（适量即可，注意鸡蛋与面粉的比例即可，本人会多放鸡蛋，味……]]></summary>
            
                <content type="html"><![CDATA[<p><img src="/media/jidanbing.png" alt="鸡蛋饼"></p>
<h3 id="用料">用料</h3>
<ul>
<li>鸡蛋：4个</li>
<li>面粉：140g（适量即可，注意鸡蛋与面粉的比例即可，本人会多放鸡蛋，味道更好些）</li>
<li>葱花、盐、水（适量即可）</li>
</ul>
<h4 id="步骤">步骤</h4>
<ol>
<li>鸡蛋打匀</li>
<li>碗中：加入面粉、打匀的鸡蛋液</li>
<li>添加水、盐，至浓稠度适中，加入葱花，搅拌均匀</li>
<li>锅内放少许油，将鸡蛋面糊沿着锅，绕一圈倒入</li>
<li>用锅铲，将面糊往锅中心铺匀</li>
<li>小火慢煎，反复翻面</li>
</ol>
<p>​</p>
]]></content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://melvini.com/categories/cook/" term="cook" label="cook" />
                            
                        
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">使用charles抓包</title>
            <link rel="alternate" type="text/html" href="https://melvini.com/coding/charles%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/" />
            <id>https://melvini.com/coding/charles%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</id>
            <updated>2020-03-28T14:25:08+08:00</updated>
            <published>2019-03-05T00:32:33+08:00</published>
            <author>
                    <name>melvini</name>
                    <uri>https://melvini.com/</uri>
                    <email>allen897577@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    
    <summary type="html"><![CDATA[功能介绍 设置系统代理 选择菜单中的 “Proxy” –&gt; “Mac OS X Proxy” 来将……]]></summary>
            
                <content type="html"><![CDATA[<h2 id="功能介绍">功能介绍</h2>
<h3 id="设置系统代理">设置系统代理</h3>
<p>选择菜单中的 “Proxy” –&gt; “Mac OS X Proxy” 来将Charles设置成系统代理</p>
<h3 id="查看视图">查看视图</h3>
<ul>
<li>Structure 视图将网络请求按访问的域名分类。</li>
<li>Sequence 视图将网络请求按访问的时间排序。</li>
</ul>
<h3 id="过滤网络请求">过滤网络请求</h3>
<ol>
<li>在主界面的中部的 Filter 栏中填入需要过滤出来的关键字。例如我们的服务器的地址是：https://survey.zhongchebaolian.com/ , 那么只需要在 Filter 栏中填入 survey 即可。</li>
<li>在 Charles 的菜单栏选择 “Proxy”–&gt;“Recording Settings”，然后选择 Include 栏，选择add一个项目，然后填入需要监控的协议，主机地址，端口号。这样就可以只截取目标网站的封包</li>
<li>在想过滤的网络请求上右击，选择 “Focus”，之后在 Filter 一栏勾选上 Focussed 一项，这种方式可以临时性的，快速地过滤出一些没有通过关键字的一类网络请求</li>
</ol>
<h3 id="截取网络包iphone">截取网络包（iPhone）</h3>
<ol>
<li>要将 Charles 的代理功能打开。在 Charles 的菜单栏上选择 “Proxy”–&gt;“Proxy Settings”，填入代理端口 8888，并且勾上 “Enable transparent HTTP proxying” 。</li>
<li>在 Charles 的菜单栏上选择 “Proxy”–&gt;“Proxy Settings”，填入代理端口 8888，并且勾上 “Enable transparent HTTP proxying” 。</li>
<li>获取 Charles 运行所在电脑的 IP 地址，Charles 的顶部菜单的 “Help”–&gt;“Local IP Address”。</li>
<li>在 iPhone 的 “ 设置 ”–&gt;“ 无线局域网 ” 中，可以看到当前连接的 wifi 名，通过点击右边的详情键，可以看到当前连接上的 wifi 的详细信息，包括 IP 地址，子网掩码等信息。在其最底部有「HTTP 代理」一项，我们将其切换成手动，然后填上 Charles 运行所在的电脑的 IP，以及端口号 8888</li>
</ol>
<h3 id="证书安装针对https">证书安装（针对Https）</h3>
<ol>
<li>首先我们需要在 Mac 电脑上安装证书。点击 Charles 的顶部菜单，选择 “Help” –&gt; “SSL Proxying” –&gt; “Install Charles Root Certificate”，然后输入系统的帐号密码，即可在 KeyChain 看到添加好的证书</li>
<li>点击 Charles 的顶部菜单，选择 “Help” –&gt; “SSL Proxying” –&gt; “Install Charles Root Certificate on a Mobile Device or Remote Browser”，然后就可以看到 Charles 弹出的简单的安装教程。</li>
<li>按照我们之前说的教程，在设备上设置好 Charles 为代理后，在手机浏览器中访问地址：<a href="https://link.jianshu.com?t=http%3A%2F%2Fcharlesproxy.com%2Fgetssl">http://charlesproxy.com/getssl</a>，即可打开证书安装的界面，安装完证书后，就可以截取手机上的 Https 通讯内容了。不过同样需要注意，默认情况下 Charles 并不做截取，你还需要在要截取的网络请求上右击，选择 SSL proxy 菜单项。</li>
</ol>
<blockquote>
<p>需要注意的是，即使是安装完证书之后，Charles 默认也并不截取 Https 网络通讯的信息，如果你想对截取某个网站上的所有 Https 网络请求，可以在该请求上右击，选择 SSL proxy这样，对于该 Host 的所有 SSL 请求可以被截取到了。</p>
</blockquote>
<h2 id="参考">参考</h2>
<p><a href="https://www.jianshu.com/p/15869111a6ff">Mac下Charles的使用教程</a></p>
]]></content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://melvini.com/categories/coding/" term="coding" label="coding" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://melvini.com/tags/charles/" term="charles" label="charles" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">浅谈php生成器</title>
            <link rel="alternate" type="text/html" href="https://melvini.com/coding/php%E7%94%9F%E6%88%90%E5%99%A8/" />
            <id>https://melvini.com/coding/php%E7%94%9F%E6%88%90%E5%99%A8/</id>
            <updated>2020-03-28T12:16:14+08:00</updated>
            <published>2018-11-03T16:24:58+08:00</published>
            <author>
                    <name>melvini</name>
                    <uri>https://melvini.com/</uri>
                    <email>allen897577@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    
    <summary type="html"><![CDATA[创建 使用yield关键字，与普通的php函数不同的是，生成器不返回值，只产出值 1 2 3……]]></summary>
            
                <content type="html"><![CDATA[<h2 id="创建">创建</h2>
<p>使用yield关键字，与普通的php函数不同的是，生成器不返回值，只产出值</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php">function getValue() {
    yield &#39;http://google.com&#39;;
    yield &#39;Hello&#39;;
    yield &#39;World&#39;;
}
</code></pre></td></tr></table>
</div>
</div><p>调用生成器函数时，PHP会返回一个属于Generator类的对象，这个对象可以使用foreach函数迭代，每次迭代，PHP会要求Generator实例计算并提供下一个要迭代的值。生成器的优雅体现在每次产出一个值之后，生成器的内部状态都会停顿；向生成器请求下一个值时，内部状态又会恢复。生成器内部的状态会一直在停顿和恢复之间切换，直到抵达函数定义体的末尾或遇到空的return语句为止。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php">foreach(getValue() as $yieldValue){
		echo $yieldValue, PHP_EOL;
}

// 输出
http://google.com
Hello 
World
</code></pre></td></tr></table>
</div>
</div><h2 id="使用">使用</h2>
<p>下面我们实现一个简单的函数用于生成一个范围内的数值，以此说明生成器是如何节省内存的</p>
<p>迭代器来实现：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php">function makeRange($length) {
    $dataSet = [];
    for ($i=0; $i<span class="err">&lt;</span>$length; $i++) {
        $dataSet[] = $i;
    }
    return $dataSet;
}

$customRange = makeRange(1000000);
foreach ($customRange as $i) {
    echo $i . PHP_EOL;
}
</code></pre></td></tr></table>
</div>
</div><p>此时执行会报错，提示超出单个PHP进程内存限制（要为100万个数字提供内存空间）</p>
<p>生成器实现：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php">function makeRange($length) {
    for ($i=0; $i<span class="err">&lt;</span>$length; $i++) {
        yield $i;
    }
}

foreach (makeRange(1000000) as $i) {
    echo $i . PHP_EOL;
}
</code></pre></td></tr></table>
</div>
</div><h2 id="实例">实例</h2>
<p>实际生产中常使用生成器迭代流资源（文件、音频等）。假设我们想要迭代一个大小为4GB的CSV文件，而虚拟私有服务器（VPS）只允许PHP使用1GB内存，因此不能把整个文件都加载到内存中，可以使用生成器完成这种操作：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php">function getRows($file) {
    $handle = fopen($file, &#39;rb&#39;);
    if ($handle == FALSE) {
        throw new Exception();
    }
    while (feof($handle) === FALSE) {
        yield fgetcsv($handle);
    }
    fclose($handle);
}

foreach (getRows($file) as $row) {
    print_r($row);
}
</code></pre></td></tr></table>
</div>
</div><p>上述示例一次只会为CSV文件中的一行分配内存，而不会把整个4GB的CSV文件都读取到内存中</p>
<blockquote>
<p>feof是C语言标准库函数，其原型在stdio.h中，其功能是检测流上的文件结束符，如果文件结束，则返回非0值，否则返回0（即，文件结束：返回非0值，文件未结束，返回0值），文件结束符只能被clearerr()清除。（这里的检测流上的文件结束符就相当于声卡检测电流信号的一个过程） fgetcsv() 函数从文件指针中读入一行并解析 CSV 字段。 与 fgets() 类似，不同的是 fgetcsv() 解析读入的行并找出 CSV 格式的字段，然后返回一个包含这些字段的数组。 fgetcsv() 出错时返回 FALSE，包括碰到文件结束时。</p>
</blockquote>
]]></content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://melvini.com/categories/coding/" term="coding" label="coding" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://melvini.com/tags/php/" term="php" label="php" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">mysql索引整理及慢查询优化</title>
            <link rel="alternate" type="text/html" href="https://melvini.com/coding/mysql%E7%B4%A2%E5%BC%95%E6%95%B4%E7%90%86%E5%8F%8A%E6%85%A2%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/" />
            <id>https://melvini.com/coding/mysql%E7%B4%A2%E5%BC%95%E6%95%B4%E7%90%86%E5%8F%8A%E6%85%A2%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/</id>
            <updated>2020-03-28T12:16:08+08:00</updated>
            <published>2018-06-29T16:39:35+08:00</published>
            <author>
                    <name>melvini</name>
                    <uri>https://melvini.com/</uri>
                    <email>allen897577@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    
    <summary type="html"><![CDATA[索引的类型 主键索引 primary ：主键索引是一种特殊的唯一索引，不允许有空值 普通索引 index 复合索引：……]]></summary>
            
                <content type="html"><![CDATA[<h2 id="索引的类型">索引的类型</h2>
<ul>
<li>
<p>主键索引 primary ：主键索引是一种特殊的唯一索引，不允许有空值</p>
</li>
<li>
<p>普通索引 index</p>
</li>
<li>
<p>复合索引：复合索引指多个字段上创建的索引，只有在查询条件中使用了创建索引时的第一个字段，索引才会被使用。使用复合索引时遵循最左前缀集合</p>
</li>
<li>
<p>唯一索引 unique</p>
</li>
<li>
<p>全文索引 fulltext</p>
</li>
<li>
<p>空间索引 spatial ：空间索引是对空间数据类型的字段建立的索引，MYSQL中的空间数据类型有4种，分别是GEOMETRY、POINT、LINESTRING、POLYGON。</p>
</li>
</ul>
<h2 id="数据结构">数据结构</h2>
<p>​		B+树索引( O(log(n)) )。红黑树等数据结构也可以用来实现索引，但是文件系统及数据库系统普遍采用B-/+Tree作为索引结构。</p>
<h2 id="建议索引的场景">建议索引的场景</h2>
<ol>
<li>只在合理的字段行建立索引。例如：用来当查询条件的字段</li>
<li>在数据的维度（区别度）比较大的字段上建立索引，否则会使得数据比例过大，转为全表扫描。</li>
<li>当多个单字段索引发生冲突时，强制使用某个索引。</li>
<li>优先对数据量比较小的字段建立索引，可以使索引文件更小，同时内存中也可以装载更多的索引键</li>
<li>长字符串可以使用前缀索引，只对字符串的前面一定字符长度建立索引。</li>
<li>尽量的扩展索引，不要新建索引。比如表中已经有a的索引，现在要加(a,b)的索引，那么只需要修改原来的索引即可。</li>
<li>索引列不能参与计算，保持列“干净”</li>
<li>最左前缀匹配原则，非常重要的原则，mysql会一直向右匹配直到遇到范围查询(&gt;、&lt;、between、like)就停止匹配</li>
</ol>
<h2 id="索引不生效的场景">索引不生效的场景</h2>
<ul>
<li>语句中带有or的时候，索引会失效</li>
<li>索引的字段使用like查询，并且使用了<code>前通配</code>，后通配会生效</li>
<li>当索引的字段是字符类型，但是储存的值是数字，比如 user_name:’123456’，在查询语句中要 user_name = ‘123456’而<code>不能</code> user_name = 123456 否则发生类型转换，索引失效</li>
<li>语句中出现列数据运算才判断的，比如where age – 10 &gt; 0 每一行都要运算之后才知道是否大于0 所以就是全表扫描，如果age &gt; 10 则可使用索引。使用函数转换列数据也一样原理。</li>
<li>组合索引时使用的条件语句</li>
</ul>
<h2 id="慢查询优化基本步骤">慢查询优化基本步骤</h2>
<ol>
<li>先运行看看是否真的很慢，注意设置SQL_NO_CACHE</li>
<li>where条件单表查，锁定最小返回记录表。这句话的意思是把查询语句的where都应用到表中返回的记录数最小的表开始查起，单表每个字段分别查询，看哪个字段的区分度最高</li>
<li>explain查看执行计划，是否与1预期一致（从锁定记录较少的表开始查询）</li>
<li>order by limit 形式的sql语句让排序的表优先查</li>
<li>了解业务方使用场景</li>
<li>加索引时参照建索引的几大原则</li>
<li>观察结果，不符合预期继续从头分析</li>
</ol>
<h2 id="参考">参考</h2>
<ul>
<li><a href="https://segmentfault.com/q/1010000003832312">Mysql有哪些索引类型？</a></li>
<li><a href="http://blog.codinglabs.org/articles/theory-of-mysql-index.html">MySQL索引背后的数据结构及算法原理</a></li>
<li><a href="https://tech.meituan.com/2014/06/30/mysql-index.html">Mysql索引原理及慢查询优化</a></li>
<li><a href="https://www.siammm.cn/archives/100">Mysql合理建立索引及优化</a></li>
</ul>
]]></content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://melvini.com/categories/coding/" term="coding" label="coding" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://melvini.com/tags/mysql/" term="mysql" label="mysql" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">常用的sql函数整理</title>
            <link rel="alternate" type="text/html" href="https://melvini.com/coding/sql%E5%87%BD%E6%95%B0/" />
            <id>https://melvini.com/coding/sql%E5%87%BD%E6%95%B0/</id>
            <updated>2020-03-28T12:16:15+08:00</updated>
            <published>2018-05-23T18:35:39+08:00</published>
            <author>
                    <name>melvini</name>
                    <uri>https://melvini.com/</uri>
                    <email>allen897577@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    
    <summary type="html"><![CDATA[处理时间 1 2 3 4 5 6 7 8 -- 日期转换为时间戳 select UNIX_TIMESTAMP(&#39;2019-1-31&#39;); -- 时间戳转换为日期 select FROM_UNIXTIME(&#39;1548864000&#39;,&#39;%Y%m%d&#39;); -- 格式为YMD格……]]></summary>
            
                <content type="html"><![CDATA[<h2 id="处理时间">处理时间</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-mysql" data-lang="mysql"><span class="c1">-- 日期转换为时间戳
</span><span class="c1"></span><span class="k">select</span> <span class="nf">UNIX_TIMESTAMP</span><span class="p">(</span><span class="s1">&#39;2019-1-31&#39;</span><span class="p">);</span>

<span class="c1">-- 时间戳转换为日期
</span><span class="c1"></span><span class="k">select</span> <span class="nf">FROM_UNIXTIME</span><span class="p">(</span><span class="s1">&#39;1548864000&#39;</span><span class="p">,</span><span class="s1">&#39;%Y%m%d&#39;</span><span class="p">);</span>

<span class="c1">-- 格式为YMD格式
</span><span class="c1"></span><span class="nf">DATE_FORMAT</span><span class="p">(</span><span class="nf">NOW</span><span class="p">(),</span> <span class="s1">&#39;%Y%m%d&#39;</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="存储过程">存储过程</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-mysql" data-lang="mysql"><span class="n">DELIMITER</span> <span class="p">;;</span>
<span class="k">CREATE</span> <span class="k">TRIGGER</span> <span class="o">`</span><span class="n">update_goods_status</span><span class="o">`</span> <span class="n">AFTER</span> <span class="k">UPDATE</span> <span class="k">ON</span> <span class="o">`</span><span class="n">pre_goods_list</span><span class="o">`</span> <span class="k">FOR</span> <span class="k">EACH</span> <span class="n">ROW</span>
<span class="n">BEGIN</span>
	<span class="k">IF</span> <span class="p">(</span> <span class="n">new</span><span class="p">.</span><span class="n">status</span> <span class="o">=</span> <span class="mi">0</span> <span class="k">AND</span> <span class="n">old</span><span class="p">.</span><span class="n">status</span> <span class="o">=</span> <span class="mi">1</span> <span class="p">)</span> <span class="k">THEN</span>
		<span class="k">UPDATE</span> <span class="o">`</span><span class="n">assets_goods</span><span class="o">`</span> <span class="kt">SET</span> <span class="o">`</span><span class="n">status</span><span class="o">`</span> <span class="o">=</span> <span class="mi">0</span> <span class="k">WHERE</span> <span class="o">`</span><span class="n">type</span><span class="o">`</span> <span class="k">IN</span><span class="p">(</span><span class="s1">&#39;goods&#39;</span><span class="p">,</span><span class="s1">&#39;trill&#39;</span><span class="p">,</span><span class="s1">&#39;exp&#39;</span><span class="p">)</span> <span class="k">AND</span> <span class="n">goods_id</span> <span class="o">=</span> <span class="n">new</span><span class="p">.</span><span class="n">goods_id</span><span class="p">;</span>
	<span class="n">END</span> <span class="k">IF</span><span class="p">;</span>
	<span class="kt">SET</span> <span class="o">@</span><span class="n">changed</span> <span class="o">=</span> <span class="n">new</span><span class="p">.</span><span class="n">attr</span> <span class="o">-</span> <span class="n">old</span><span class="p">.</span><span class="n">attr</span><span class="p">;</span>
	<span class="kt">SET</span> <span class="o">@</span><span class="n">already</span> <span class="o">=</span> <span class="k">EXISTS</span> <span class="p">(</span> <span class="k">SELECT</span> <span class="n">id</span> <span class="k">FROM</span> <span class="o">`</span><span class="n">goods_s</span><span class="o">`</span> <span class="k">WHERE</span> <span class="o">`</span><span class="n">goods_id</span><span class="o">`</span> <span class="o">=</span> <span class="n">new</span><span class="p">.</span><span class="n">goods_id</span> <span class="p">);</span>
	<span class="k">IF</span> <span class="p">(</span> <span class="o">@</span><span class="n">changed</span> <span class="o">&lt;=</span> <span class="mi">5</span> <span class="k">AND</span> <span class="o">@</span><span class="n">changed</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="k">AND</span> <span class="o">@</span><span class="n">already</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">)</span> <span class="k">THEN</span>
		<span class="k">INSERT</span> <span class="k">INTO</span> <span class="o">`</span><span class="n">goods_spec</span><span class="o">`</span> <span class="p">(</span><span class="o">`</span><span class="n">goods_id</span><span class="o">`</span><span class="p">,</span><span class="o">`</span><span class="n">goods_name</span><span class="o">`</span><span class="p">,</span><span class="o">`</span><span class="n">seller_id</span><span class="o">`</span><span class="p">,</span><span class="o">`</span><span class="n">seller_shop</span><span class="o">`</span><span class="p">,</span><span class="o">`</span><span class="n">changed</span><span class="o">`</span><span class="p">,</span><span class="o">`</span><span class="n">dateline</span><span class="o">`</span><span class="p">,</span><span class="o">`</span><span class="kt">datetime</span><span class="o">`</span><span class="p">)</span> 
		<span class="k">VALUES</span><span class="p">(</span><span class="n">new</span><span class="p">.</span><span class="n">goods_id</span><span class="p">,</span> <span class="n">new</span><span class="p">.</span><span class="n">goods_name</span><span class="p">,</span> <span class="n">new</span><span class="p">.</span><span class="n">seller_id</span><span class="p">,</span> <span class="n">new</span><span class="p">.</span><span class="n">seller_shop</span><span class="p">,</span> <span class="n">new</span><span class="p">.</span><span class="n">attr_ratio</span> <span class="o">-</span> <span class="n">old</span><span class="p">.</span><span class="n">attr_ratio</span><span class="p">,</span> <span class="nf">UNIX_TIMESTAMP</span><span class="p">(),</span> <span class="nf">DATE_FORMAT</span><span class="p">(</span><span class="nf">now</span><span class="p">(),</span> <span class="s1">&#39;%Y%m%d&#39;</span><span class="p">));</span>
	<span class="n">END</span> <span class="k">IF</span><span class="p">;</span>
<span class="n">END</span>
<span class="p">;;</span>
<span class="n">DELIMITER</span> <span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="having和where的区别">having和where的区别：</h2>
<p>有聚合函数（如sum、count）时，只能用having</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-mysql" data-lang="mysql"><span class="k">SELECT</span> <span class="nf">count</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="k">AS</span> <span class="n">q</span><span class="p">,</span> <span class="nf">SUM</span><span class="p">(</span><span class="n">money</span><span class="p">)</span> <span class="k">AS</span> <span class="n">amount</span><span class="err">，</span><span class="o">`</span><span class="n">trade_id</span><span class="o">`</span><span class="p">,</span><span class="o">`</span><span class="n">sku_id</span><span class="o">`</span> <span class="k">FROM</span> <span class="o">`</span><span class="n">pre_jingdong_tmp</span><span class="o">`</span> <span class="k">GROUP</span> <span class="k">BY</span> <span class="o">`</span><span class="n">trade_id</span><span class="o">`</span><span class="p">,</span><span class="o">`</span><span class="n">sku_id</span><span class="o">`</span> <span class="k">HAVING</span> <span class="n">q</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="k">AND</span> <span class="n">amount</span> <span class="o">=</span> <span class="mi">0</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="何时使用find_in_set-inlike">何时使用find_in_set() 、in()、like</h2>
<p>FIND_IN_SET(str,strlist)</p>
<blockquote>
<p>str:要查询的字符串。strlist 字段名:参数以”,”分隔 如 (1,2,6,8)</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-mysql" data-lang="mysql"><span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">treenodes</span> <span class="k">where</span> <span class="nf">FIND_IN_SET</span><span class="p">(</span><span class="n">id</span><span class="p">,</span> <span class="s1">&#39;1,2,3,4,5&#39;</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><p>类似in()</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-mysql" data-lang="mysql"><span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">treenodes</span> <span class="k">where</span> <span class="n">id</span> <span class="k">in</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>find_in_set()和in的区别：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-mysql" data-lang="mysql"><span class="k">SELECT</span> <span class="n">id</span><span class="p">,</span><span class="n">name</span><span class="p">,</span><span class="n">list</span> <span class="k">from</span> <span class="n">tb_test</span> <span class="k">WHERE</span> <span class="s1">&#39;daodao&#39;</span> <span class="k">IN</span> <span class="p">(</span><span class="s1">&#39;libk&#39;</span><span class="p">,</span> <span class="s1">&#39;zyfon&#39;</span><span class="p">,</span> <span class="s1">&#39;daodao&#39;</span><span class="p">);</span>
  
<span class="k">SELECT</span> <span class="n">id</span><span class="p">,</span><span class="n">name</span><span class="p">,</span><span class="n">list</span> <span class="k">from</span> <span class="n">tb_test</span> <span class="k">WHERE</span> <span class="nf">FIND_IN_SET</span><span class="p">(</span><span class="s1">&#39;daodao&#39;</span><span class="p">,</span><span class="n">list</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><p>如果list是常量，则可以直接用IN， 否则要用find_in_set()函数</p>
</li>
<li>
<p>find_in_set()和like的区别：</p>
<p>like是广泛的模糊匹配，字符串中没有分隔符，Find_IN_SET 是精确匹配，字段值以英文”,”分隔，Find_IN_SET查询的结果要小于like查询的结果。</p>
</li>
</ul>
<h2 id="批量替换">批量替换</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-mysql" data-lang="mysql"><span class="k">update</span> <span class="n">pre_image_list</span> <span class="kt">set</span> <span class="n">image_url</span> <span class="o">=</span> <span class="k">replace</span><span class="p">(</span> <span class="n">image_url</span><span class="p">,</span> <span class="s1">&#39;images/&#39;</span><span class="p">,</span> <span class="s1">&#39;http://logo.melvini.com/upload/images/&#39;</span> <span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div>]]></content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://melvini.com/categories/coding/" term="coding" label="coding" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://melvini.com/tags/mysql/" term="mysql" label="mysql" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">alfred使用</title>
            <link rel="alternate" type="text/html" href="https://melvini.com/coding/alfred%E4%BD%BF%E7%94%A8/" />
            <id>https://melvini.com/coding/alfred%E4%BD%BF%E7%94%A8/</id>
            <updated>2020-03-28T10:39:08+08:00</updated>
            <published>2018-05-02T16:32:54+08:00</published>
            <author>
                    <name>melvini</name>
                    <uri>https://melvini.com/</uri>
                    <email>allen897577@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    
    <summary type="html"><![CDATA[插件搜索 packal alfredworkflow Github 相关资料 Mac效率神器Alfred以及常用Workflow Alfred……]]></summary>
            
                <content type="html"><![CDATA[<h2 id="插件搜索">插件搜索</h2>
<ul>
<li><a href="http://www.packal.org/">packal</a></li>
<li><a href="http://www.alfredworkflow.com/">alfredworkflow</a></li>
<li><a href="https://github.com/">Github</a></li>
</ul>
<h2 id="相关资料">相关资料</h2>
<ul>
<li><a href="https://www.jianshu.com/p/0e78168da7ab">Mac效率神器Alfred以及常用Workflow</a></li>
<li><a href="http://louiszhai.github.io/2018/05/31/alfred/">Alfred使用手册</a></li>
<li><a href="https://hufangyun.com/2018/alfred-workflow-recommend/">常用Workflow插件</a></li>
</ul>
]]></content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://melvini.com/categories/coding/" term="coding" label="coding" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://melvini.com/tags/alfred/" term="alfred" label="alfred" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">活在当下</title>
            <link rel="alternate" type="text/html" href="https://melvini.com/life/%E6%B4%BB%E5%9C%A8%E5%BD%93%E4%B8%8B/" />
            <id>https://melvini.com/life/%E6%B4%BB%E5%9C%A8%E5%BD%93%E4%B8%8B/</id>
            <updated>2020-03-29T23:33:27+08:00</updated>
            <published>2018-03-18T22:46:16+08:00</published>
            <author>
                    <name>melvini</name>
                    <uri>https://melvini.com/</uri>
                    <email>allen897577@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    
    <summary type="html"><![CDATA[这世上唯有病痛和亲友去世是真切的痛楚，其他都是不必要的伤感。是忽略了当下拥有的一切的……]]></summary>
            
                <content type="html"><![CDATA[<p><img src="/media/livet.jpg" alt="活在当下"></p>
<p>这世上唯有病痛和亲友去世是真切的痛楚，其他都是不必要的伤感。是忽略了当下拥有的一切的贪婪。&quot;
说得太好了。
有时候我们痛苦，也是因为现实距离目标太远，而本来，现实已经十分美好</p>
<p>​</p>
]]></content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://melvini.com/categories/life/" term="life" label="life" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://melvini.com/tags/diary/" term="diary" label="diary" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">回忆小屋</title>
            <link rel="alternate" type="text/html" href="https://melvini.com/notes/%E5%9B%9E%E5%BF%86%E5%B0%8F%E5%B1%8B/" />
            <id>https://melvini.com/notes/%E5%9B%9E%E5%BF%86%E5%B0%8F%E5%B1%8B/</id>
            <updated>2020-03-29T23:41:46+08:00</updated>
            <published>2017-12-15T10:45:50+08:00</published>
            <author>
                    <name>melvini</name>
                    <uri>https://melvini.com/</uri>
                    <email>allen897577@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html"><![CDATA[回忆就像剥洋葱，总有一层会让你落泪]]></summary>
            
                <content type="html"><![CDATA[<p>　　回忆就像剥洋葱，总有一层会让你落泪</p>
<p><img src="/media/p2.jpg" alt="p2"></p>
<p><img src="/media/p1.jpg" alt="p2"></p>
]]></content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://melvini.com/categories/notes/" term="notes" label="notes" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://melvini.com/tags/movie/" term="movie" label="movie" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">php常见错误及使用</title>
            <link rel="alternate" type="text/html" href="https://melvini.com/coding/php%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF/" />
            <id>https://melvini.com/coding/php%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF/</id>
            <updated>2020-03-28T12:16:13+08:00</updated>
            <published>2017-11-03T16:24:58+08:00</published>
            <author>
                    <name>melvini</name>
                    <uri>https://melvini.com/</uri>
                    <email>allen897577@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    
    <summary type="html"><![CDATA[strtotime 1 date( &#34;Y-m&#34;, strtotime( &#34;+1 month&#34;,strtotime(&#34;2017-01-31&#34;))); 预期的结果是：2017-02，而实际得出的是：2017-03 原因在于二……]]></summary>
            
                <content type="html"><![CDATA[<h2 id="strtotime"><strong>strtotime</strong></h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php">date( &#34;Y-m&#34;, strtotime( &#34;+1 month&#34;,strtotime(&#34;2017-01-31&#34;)));
</code></pre></td></tr></table>
</div>
</div><p>预期的结果是：<strong>2017-02</strong>，而实际得出的是：<strong>2017-03</strong></p>
<p>原因在于二月是没有三十一号，多余的天数会加到三月份。解决方法有两种</p>
<p>第一种：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php">date( &#34;Y-m&#34;, strtotime( &#34;first day of +1 month&#34;,strtotime(&#34;2017-01-31&#34;)));
</code></pre></td></tr></table>
</div>
</div><p>第二种：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php">date( &#34;Y-m&#34;, strtotime( &#34;+1 month&#34;,strtotime(&#34;2017-01-01&#34;)));
</code></pre></td></tr></table>
</div>
</div><h2 id="strpos"><strong>strpos</strong></h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php">if(strpos(&#34;to be better&#34;,&#34;better&#34;) === TRUE) // 错误，应使用 !== FALSE
if(strpos(&#34;to be better&#34;,&#34;better&#34;) === FALSE)
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>查看官方文档的解释：此函数可能返回布尔值 FALSE，但也可能返回等同于 FALSE 的非布尔值。请阅读 布尔类型章节以获取更多信息。&gt; 应使用 === 运算符来测试此函数的返回值。可以看出 === TRUE 这种判断是错的，应使用！== FALSE 来判断为真</p>
</blockquote>
<h2 id="判断各种空值"><strong>判断各种空值</strong></h2>
<p>使用 if 判断时， PHP 对待：NULL、false、0、 空字符是一样的。以下为各判断函数对照表：
<img src="/media/if.png" alt="php各种条件判断"></p>
<h2 id="array_merge--和-"><strong>array_merge () 和 +</strong></h2>
<p>array_merge()：如果输入的数组中有相同的字符串键名，则该键名后面的值将覆盖前一个值。（你的 1567）如果数组包含数字键名（可以试试看，之前折腾死我了），后面的值将不会覆盖原来的值，而是附加到后面。（数字键名会被重新分配，总会变成从零开始的。。）</p>
<ul>
<li>对于使用 “＋” 合并数组：如果数组中有相同的字符串键名（不管是不是数字），则会把最先出现的值作为最终结果返回，而把后面的数组拥有相同键名的那些值 “抛弃” 掉。（</li>
</ul>
<h2 id="null-合并运算符"><strong>null 合并运算符</strong></h2>
<p>在？？中，$_GET ['user'] 便已经使用了 isset由于日常使用中存在大量同时使用三元表达式和 <a href="https://www.php.net/manual/zh/function.isset.php">isset()</a> 的情况， 我们添加了 null 合并运算符 (<em>??</em>) 这个语法糖。如果变量存在且值不为<strong><code>NULL</code></strong>， 它就会返回自身的值，否则返回它的第二个操作数。</p>
<h2 id="预处理的两种方式">预处理的两种方式</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php">$stmt = $dbh-&gt;prepare(&#34;INSERT INTO REGISTRY (name, value) VALUES (:name, :value)&#34;);
$stmt-&gt;bindParam(&#39;:name&#39;, $name);
$stmt-&gt;bindParam(&#39;:value&#39;, $value);

$stmt = $dbh-&gt;prepare(&#34;INSERT INTO REGISTRY (name, value) VALUES (?, ?)&#34;);
$stmt-&gt;bindParam(1, $name);
$stmt-&gt;bindParam(2, $value);

</code></pre></td></tr></table>
</div>
</div>]]></content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://melvini.com/categories/coding/" term="coding" label="coding" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://melvini.com/tags/php/" term="php" label="php" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">一些常用的git命令</title>
            <link rel="alternate" type="text/html" href="https://melvini.com/coding/git%E6%93%8D%E4%BD%9C/" />
            <id>https://melvini.com/coding/git%E6%93%8D%E4%BD%9C/</id>
            <updated>2020-03-29T15:25:04+08:00</updated>
            <published>2017-06-29T16:39:35+08:00</published>
            <author>
                    <name>melvini</name>
                    <uri>https://melvini.com/</uri>
                    <email>allen897577@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    
    <summary type="html"><![CDATA[基本 1 2 3 4 5 6 7 8 9 10 11 12 13 git init git add . git commit -m &#34;First commit&#34; git remote add origin {远程仓库地址} git remote -v git pull……]]></summary>
            
                <content type="html"><![CDATA[<h2 id="基本">基本</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">git init

git add .

git commit -m <span class="s2">&#34;First commit&#34;</span>

git remote add origin <span class="o">{</span>远程仓库地址<span class="o">}</span>

git remote -v

git pull origin master

git push -u origin master
</code></pre></td></tr></table>
</div>
</div><h2 id="合并冲突">合并冲突</h2>
<p>针对refusing to merge unrelated histories问题</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># 允许合并不相关的内容</span>
git pull --allow-unrelated-histories

<span class="c1"># 提交内容</span>
git push
</code></pre></td></tr></table>
</div>
</div><p>针对<strong><strong>non-fast-forward</strong></strong>问题</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># 强推，本地代码强行覆盖远程`git`仓库</span>
git push -f
</code></pre></td></tr></table>
</div>
</div><p>忽略文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">git update-index --assume-unchanged ../config/config.php
</code></pre></td></tr></table>
</div>
</div><h2 id="push多个git地址">push多个git地址</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># 配置远程仓库</span>
git remote add origin https://url

<span class="c1"># 再添加一个远程仓库</span>
git remote set-url --add origin https://url

</code></pre></td></tr></table>
</div>
</div><p>可以在 .git/config 里查看是否添加成功</p>
]]></content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://melvini.com/categories/coding/" term="coding" label="coding" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://melvini.com/tags/git/" term="git" label="git" />
                            
                        
                    
                
            
        </entry>
    
</feed>
